{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red40\green41\blue52;\red0\green0\blue0;\red83\green83\blue83;
\red16\green60\blue192;}
{\*\expandedcolortbl;;\cssrgb\c20784\c21569\c26667;\cssrgb\c0\c0\c0;\cssrgb\c40000\c40000\c40000;
\cssrgb\c6667\c33333\c80000;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww28600\viewh15980\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
\pard\pardeftab720\sl760\qc\partightenfactor0

\f1\fs64 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Feature Request: Preview Tracks with Images and Descriptions
\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl440\qc\partightenfactor0

\b\fs37\fsmilli18667 \cf4 \strokec4 July 24th 2018
\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl280\partightenfactor0
\cf3 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs37\fsmilli18667 \cf2 \strokec2 OBJECTIVE
\fs48 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\b0\fs29\fsmilli14667 \cf2 \strokec2 To create a feature which will fetch the image and details of the track using the URI, provide a rich layout.
\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs37\fsmilli18667 \cf2 \strokec2 BACKGROUND 
\fs48 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\b0\fs29\fsmilli14667 \cf2 \strokec2 Currently, Jammming supports the ability to create one new playlist at a time and save it to Spotify. However, updating an existing playlist is not supported. With over 5 million playlists created or edited daily on Spotify, this is key functionality to support. 
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 This feature accomplishes the following:
\fs24 \cf3 \strokec3 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl440\partightenfactor0
\ls1\ilvl0
\fs29\fsmilli14667 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Displays a list of the current user's playlists\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Allows a user to select one of their existing playlists. The application will load the name of that playlist and the tracks of that playlist in the playlist panel.\uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 The user may update the name and/or the tracks of the playlist and click "SAVE PLAYLIST". When the user selects "SAVE PLAYLIST", Jammming will save the current version of the playlist to the user's Spotify account. \uc0\u8232 \
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\'95	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 If the user selects a different playlist while the current playlist has unsaved changes, Jammming will load and display the new playlist, and will not save the changes to the old playlist. If the user returns to the old playlist, Jammming will display Spotify's version of the playlist, not the edited version.\uc0\u8232 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs37\fsmilli18667 \cf2 TECHNICAL DESIGN
\fs48 \cf3 \strokec3 \
\pard\pardeftab720\sl380\partightenfactor0

\fs32 \cf2 \strokec2 Retrieve and Display Playlists
\fs48 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\b0\fs29\fsmilli14667 \cf2 \strokec2 A new component, 
\b PlaylistList
\b0 , should be created. This component, on render, will retrieve a list of the current user's playlists. 
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 We will need to initialize 
\i state
\i0  for 
\i PlaylistList
\i0  to contain a key for 
\i playlists
\i0  that defaults to an empty array.
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 To retrieve playlists, we will create a new method, 
\b Spotify.getUserPlaylists()
\b0 , that hits the {\field{\*\fldinst{HYPERLINK "https://developer.spotify.com/web-api/get-list-users-playlists/"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 https://api.spotify.com/v1/users/\{user_id\}/playlists}}\cf3 \strokec3  endpoint\cf2 \strokec2 . As we can see, this endpoint requires the user ID. 
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 To retrieve the user ID, we will hit the {\field{\*\fldinst{HYPERLINK "https://developer.spotify.com/web-api/get-current-users-profile/"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 https://api.spotify.com/v1/me}} endpoint, as we currently do in 
\i Spotify.savePlaylist()
\i0 . We will refactor this request to a new method called 
\b Spotify.getCurrentUserId()
\b0  (to avoid duplicate code). At the top of 
\i Spotify.js
\i0 , we will instantiate a variable called 
\b userId
\b0  with no value. Then inside 
\i Spotify.getCurrentUserId()
\i0 , we will check to see if 
\i userId
\i0 's value is already set (from a previous call to the function). If it is, we will create and return a promise that will resolve to that value. Otherwise we will make the call to the 
\i /me
\i0  endpoint and return that request's promise.
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 Once our 
\i .getCurrentUserId()
\i0  is written, we should use it in both 
\i Spotify.savePlaylist()
\i0  and our new method, 
\i Spotify.getUserPlaylists()
\i0 . 
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 In 
\i Spotify.getUserPlaylist()
\i0 , once the user ID has been retrieved, we can make our call to the 
\i /users/\{user_id\}/playlists
\i0  endpoint. Upon completion of this request, we will update the current playlist's state to an array of the returned playlists. Rather than storing the entire playlists, we should create and store objects for each playlist that contain the 
\b playlistId
\b0  and 
\b name
\b0  of each playlist (the API will not return that playlist's tracks, thus we will need to use the playlist ID later to retrieve those tracks).
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 To call this method at time of render, we should add a 
\i .componentWillMount()
\i0  lifecycle method to 
\i playlistList
\i0  and call 
\i .getUserPlaylists()
\i0  within it.
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 The 
\i .render()
\i0  method of 
\i playlistList
\i0  should render a list of 
\b playlistListItem
\b0  components (another new component), passing down the 
\i ID
\i0  and 
\i name
\i0  of each playlist to be rendered. 
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 Finally, 
\i App
\i0  should render 
\i playlistList
\i0 .
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 This component should look as follows upon implementation:
\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl440\qc\partightenfactor0

\fs29\fsmilli14667 \cf2 \strokec2 \pard\pardeftab720\sl440\qc\partightenfactor0

\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl380\partightenfactor0

\b\fs32 \cf2 \strokec2 Select Playlists
\fs48 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\b0\fs29\fsmilli14667 \cf2 \strokec2 In 
\i App.js
\i0 , we will add a method for selecting a playlist. This method should retrieve the tracks of the selected playlist and then update state to the retrieved playlist. 
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 In 
\i Spotify.js
\i0 , we will add a method called .
\b getPlaylist(id)
\b0  that will retrieve the playlist with the provided ID. This method should call the {\field{\*\fldinst{HYPERLINK "https://developer.spotify.com/web-api/get-playlists-tracks/"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 https://api.spotify.com/v1/users/\{user_id\}/playlists/\{playlist_id\}/tracks}} endpoint and return a promise that will resolve to the retrieved tracks.
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 In 
\i App.js
\i0 , we will add a method called 
\i .selectPlaylist(id)
\i0  which will call 
\i Spotify.getPlaylist()
\i0  with the provided playlist ID. When the 
\i Spotify.getPlaylist()
\i0  call resolves, we will update 
\i playlistName
\i0  and 
\i playlistTracks
\i0  on 
\i App
\i0 's 
\i state
\i0 .
\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\i\fs29\fsmilli14667 \cf2 \strokec2 App.selectPlaylist()
\i0  should then be bound to the current instance of 
\i App
\i0  and passed down to the rendered 
\i PlaylistList
\i0 .
\fs24 \cf3 \strokec3 \

\i\fs29\fsmilli14667 \cf2 \strokec2 PlaylistList
\i0  will then pass this method down to each 
\i PlaylistListItem
\i0 .
\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\fs29\fsmilli14667 \cf2 \strokec2 Finally, each 
\i PlaylistListIem
\i0  should add an 
\i onClick
\i0  listener to its root rendered JSX element. This listener should call a method which calls the passed down 
\i App.selectPlaylist()
\i0  method with the current PlaylistListItem's 
\i id
\i0  prop.
\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl380\partightenfactor0

\b\fs32 \cf2 \strokec2 Save Playlists
\fs48 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\b0\fs29\fsmilli14667 \cf2 \strokec2 When saving a playlist, we always make a new playlist in the user's account; however, we only want to do that if the playlist doesn't exist. We will check this by storing the playlist's ID (if it has one).
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 In 
\i App.js
\i0 , we will add a key to our state called 
\b playlistId
\b0 , which initializes to 
\i null
\i0 . 
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 Next we will modify 
\i Spotify.savePlaylist()
\i0  to take a third parameter, 
\b id
\b0 . In 
\i App.js
\i0  we will pass the 
\i state
\i0 's 
\i playlistId
\i0  in as this third parameter in our call to 
\i Spotify.savePlaylist()
\i0  within 
\i App.savePlaylist()
\i0 . We also need to update our 
\i App.selectPlaylist()
\i0  method to update its state to the selected playlist's ID.
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 Finally, in 
\i Spotify.savePlaylist()
\i0  we will check to see if an 
\i id
\i0  was provided. If so, we should update the playlist name by calling the {\field{\*\fldinst{HYPERLINK "https://developer.spotify.com/web-api/change-playlist-details/"}}{\fldrslt \cf5 \ul \ulc5 \strokec5 https://api.spotify.com/v1/users/\{user_id\}/playlists/\{playlist_id\} }}endpoint with the updated name. If not, we can continue creating a new playlist as normal.
\fs24 \cf3 \strokec3 \

\fs29\fsmilli14667 \cf2 \strokec2 In 
\i App.js
\i0 , we currently clear the 
\i playlistName
\i0  and 
\i playlistTracks
\i0  when a playlist has finished saving. We need to additionally clear the value of 
\i playlistId
\i0  by setting it back to 
\i null
\i0 . 
\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs37\fsmilli18667 \cf2 \strokec2 CAVEATS
\fs48 \cf3 \strokec3 \
\pard\pardeftab720\sl380\partightenfactor0

\fs32 \cf2 \strokec2 App Playlist State
\fs48 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\b0\fs29\fsmilli14667 \cf2 \strokec2 With this implementation, we are now storing three separate values about our playlist on our 
\i App
\i0  component. This information is almost always linked together and therefore it may be useful to store one object called 
\i playlist
\i0  on the 
\i App
\i0 's 
\i state
\i0 . This implementation would make passing information easier and potentially improve readability. However, it also makes it less clear which information must be present in 
\i App
\i0 's state. This less structured data provides more room for incorrect implementation of future feature requests. With only three properties being stored, we have decided to continue storing this information as separate 
\i state
\i0  values. However, this should be re-evaluated if we decide to store even more playlist information on 
\i App
\i0 's 
\i state
\i0 .
\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs29\fsmilli14667 \cf2 \strokec2 Asynchronous Existing Playlist Save Requests
\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\fs29\fsmilli14667 \cf2 \strokec2 In the initial implementation of Jammming, every playlist save necessitated a playlist to be created with the specified name and then the tracks to be saved to the playlist after that playlist creation completes. With the added functionality of saving a pre-existing playlist, we no longer need to create a new playlist as the first step every time. As a result, when saving a pre-existing playlist, we could send two simultaneous requests: one to save the updated name, the other to save the updated track list. This would result in a more complicated save playlist flow and would result in marginal returns in time efficiency when saving a playlist. Since the user is not prevented from continuing to interact with Jammming during playlist save, this efficiency would result in no change to user experience. Therefore we will not implement this functionality since the loss in code readability outweighs any gain in user experience. This would be a premature optimization.
\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\b\fs29\fsmilli14667 \cf2 \strokec2 Excess Playlist Saves
\b0\fs24 \cf3 \strokec3 \
\pard\pardeftab720\sl440\partightenfactor0

\fs29\fsmilli14667 \cf2 \strokec2 Currently, Jammming will save the displayed playlist name and tracks on every "SAVE PLAYLIST" click regardless of whether or not data has changed. This could result in unnecessary requests to the Spotify API (especially considering Playlist names are not likely to change often). As noted in the previous caveat, though, extra requests to the Spotify API will not result in any change to the user experience. If we find in the future that users are intentionally abusing this functionality and we run the risk of throttling the Spotify API, we will implement this functionality. However, at this point, this would be another premature optimization.
\fs24 \cf3 \strokec3 \
}