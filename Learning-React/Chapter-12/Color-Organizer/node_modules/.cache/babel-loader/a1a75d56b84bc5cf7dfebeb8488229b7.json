{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { colors } from '../reducers/colorsReducer';\nimport { sort } from '../reducers/sortReducer';\nimport stateData from '../data/initial-data';\n\nconst clientLogger = store => next => action => {\n  let result;\n  console.groupCollapsed(\"dispatching\", action.type);\n  console.log('prev state', store.getState());\n  console.log('action', action);\n  result = next(action);\n  console.log('next state', store.getState());\n  console.groupEnd();\n  return result;\n};\n\nconst serverLogger = store => next => action => {\n  console.log('\\n dispatching server action\\n');\n  console.log(action);\n  console.log('\\n');\n  return next(action);\n};\n\nconst middleware = server => server ? serverLogger : clientLogger;\n/*const saver = store => next => action => {\n    let result = next(action)\n    localStorage['redux-store'] = JSON.stringify(store.getState())\n    return result\n}*/\n\n\nconst storeFactory = (server = false, initialState = {\n  stateData\n}) => applyMiddleware(middleware)(createStore)(combineReducers({\n  colors\n}), initialState);\n\nexport default storeFactory;","map":{"version":3,"sources":["/Users/Antoine/Developer/Code/React-js/Learning-React/Chapter-12/Color-Organizer/src/store/index.js"],"names":["createStore","combineReducers","applyMiddleware","colors","sort","stateData","clientLogger","store","next","action","result","console","groupCollapsed","type","log","getState","groupEnd","serverLogger","middleware","server","storeFactory","initialState"],"mappings":"AACA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;;AAEA,MAAMC,YAAY,GAAGC,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5C,MAAIC,MAAJ;AACAC,EAAAA,OAAO,CAACC,cAAR,CAAuB,aAAvB,EAAsCH,MAAM,CAACI,IAA7C;AACAF,EAAAA,OAAO,CAACG,GAAR,CAAY,YAAZ,EAA0BP,KAAK,CAACQ,QAAN,EAA1B;AACAJ,EAAAA,OAAO,CAACG,GAAR,CAAY,QAAZ,EAAsBL,MAAtB;AACAC,EAAAA,MAAM,GAAGF,IAAI,CAACC,MAAD,CAAb;AACAE,EAAAA,OAAO,CAACG,GAAR,CAAY,YAAZ,EAA0BP,KAAK,CAACQ,QAAN,EAA1B;AACAJ,EAAAA,OAAO,CAACK,QAAR;AACA,SAAON,MAAP;AACH,CATD;;AAWA,MAAMO,YAAY,GAAGV,KAAK,IAAIC,IAAI,IAAIC,MAAM,IAAI;AAC5CE,EAAAA,OAAO,CAACG,GAAR,CAAY,gCAAZ;AACAH,EAAAA,OAAO,CAACG,GAAR,CAAYL,MAAZ;AACAE,EAAAA,OAAO,CAACG,GAAR,CAAY,IAAZ;AACA,SAAON,IAAI,CAACC,MAAD,CAAX;AACH,CALD;;AAOA,MAAMS,UAAU,GAAGC,MAAM,IACpBA,MAAD,GAAWF,YAAX,GAA0BX,YAD9B;AAGA;;;;;;;AAMA,MAAMc,YAAY,GAAG,CAACD,MAAM,GAAG,KAAV,EAAiBE,YAAY,GAAC;AAAChB,EAAAA;AAAD,CAA9B,KACjBH,eAAe,CAACgB,UAAD,CAAf,CAA4BlB,WAA5B,EACIC,eAAe,CAAC;AAACE,EAAAA;AAAD,CAAD,CADnB,EAEIkB,YAFJ,CADJ;;AAMA,eAAeD,YAAf","sourcesContent":["\nimport { createStore, combineReducers, applyMiddleware } from 'redux'\nimport { colors } from '../reducers/colorsReducer'\nimport { sort } from '../reducers/sortReducer'\nimport stateData from '../data/initial-data'\n\nconst clientLogger = store => next => action => {\n    let result\n    console.groupCollapsed(\"dispatching\", action.type)\n    console.log('prev state', store.getState())\n    console.log('action', action)\n    result = next(action)\n    console.log('next state', store.getState())\n    console.groupEnd()\n    return result\n}\n\nconst serverLogger = store => next => action => {\n    console.log('\\n dispatching server action\\n')\n    console.log(action)\n    console.log('\\n')\n    return next(action)\n}\n\nconst middleware = server =>\n    (server) ? serverLogger : clientLogger\n\n/*const saver = store => next => action => {\n    let result = next(action)\n    localStorage['redux-store'] = JSON.stringify(store.getState())\n    return result\n}*/\n\nconst storeFactory = (server = false, initialState={stateData}) =>\n    applyMiddleware(middleware)(createStore)(\n        combineReducers({colors}),\n        initialState\n    )\n\nexport default storeFactory\n"]},"metadata":{},"sourceType":"module"}