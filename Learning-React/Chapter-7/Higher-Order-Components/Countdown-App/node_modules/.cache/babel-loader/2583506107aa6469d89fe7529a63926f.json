{"ast":null,"code":"import { EventEmitter } from 'events';\n\nclass CountdownStore extends EventEmitter {\n  constructor(count = 5, dispatcher) {\n    super();\n    this._count = count;\n    this.dispatcherIndex = dispatcher.register(this.dispatch.bind(this));\n  }\n\n  get count() {\n    return this._count;\n  }\n\n  dispatch(payload) {\n    const _payload$action = payload.action,\n          type = _payload$action.type,\n          count = _payload$action.count;\n\n    switch (type) {\n      case \"TICK\":\n        this._count = this._count - 1;\n        this.emit(\"TICK\", this._count);\n        return true;\n\n      case \"RESET\":\n        this._count = count;\n        this.emit(\"RESET\", this._count);\n        return true;\n    }\n  }\n\n}\n\nexport default CountdownStore;","map":{"version":3,"sources":["/Users/Antoine/Developer/Code/React-js/Learning-React/Chapter-7/Higher-Order-Components/Countdown-App/src/stores/CountdownStore.js"],"names":["EventEmitter","CountdownStore","constructor","count","dispatcher","_count","dispatcherIndex","register","dispatch","bind","payload","action","type","emit"],"mappings":"AACA,SAASA,YAAT,QAA6B,QAA7B;;AAEA,MAAMC,cAAN,SAA6BD,YAA7B,CAA0C;AAEtCE,EAAAA,WAAW,CAACC,KAAK,GAAC,CAAP,EAAUC,UAAV,EAAsB;AAC7B;AACA,SAAKC,MAAL,GAAcF,KAAd;AACA,SAAKG,eAAL,GAAuBF,UAAU,CAACG,QAAX,CACnB,KAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAnB,CADmB,CAAvB;AAGH;;AAED,MAAIN,KAAJ,GAAY;AACR,WAAO,KAAKE,MAAZ;AACH;;AAEDG,EAAAA,QAAQ,CAACE,OAAD,EAAU;AAAA,4BACUA,OAAO,CAACC,MADlB;AAAA,UACNC,IADM,mBACNA,IADM;AAAA,UACAT,KADA,mBACAA,KADA;;AAEd,YAAOS,IAAP;AAEI,WAAK,MAAL;AACI,aAAKP,MAAL,GAAc,KAAKA,MAAL,GAAc,CAA5B;AACA,aAAKQ,IAAL,CAAU,MAAV,EAAkB,KAAKR,MAAvB;AACA,eAAO,IAAP;;AAEJ,WAAK,OAAL;AACI,aAAKA,MAAL,GAAcF,KAAd;AACA,aAAKU,IAAL,CAAU,OAAV,EAAmB,KAAKR,MAAxB;AACA,eAAO,IAAP;AAVR;AAaH;;AA7BqC;;AAgC1C,eAAeJ,cAAf","sourcesContent":["\nimport { EventEmitter } from 'events';\n\nclass CountdownStore extends EventEmitter {\n\n    constructor(count=5, dispatcher) {\n        super()\n        this._count = count\n        this.dispatcherIndex = dispatcher.register(\n            this.dispatch.bind(this)\n        )\n    }\n\n    get count() {\n        return this._count\n    }\n\n    dispatch(payload) {\n        const { type, count } = payload.action\n        switch(type) {\n\n            case \"TICK\":\n                this._count = this._count - 1\n                this.emit(\"TICK\", this._count)\n                return true\n\n            case \"RESET\":\n                this._count = count\n                this.emit(\"RESET\", this._count)\n                return true\n\n        }\n    }\n}\n\nexport default CountdownStore;\n"]},"metadata":{},"sourceType":"module"}